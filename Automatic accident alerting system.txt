#include <TinyGPS.h> 
#include <Wire.h>
#include <SoftwareSerial.h>
#include "MPU6050_6Axis_MotionApps20.h"
#define buzzer 6
float lat = 28.5458,lon = 77.1703; // create variable for latitude and longitude object  
SoftwareSerial gpsSerial(0,1);//rx,tx 

TinyGPS gps; // create gps object
MPU6050 mpu;
// MPU6050 Slave Device Address
const uint8_t MPU6050SlaveAddress = 0x68;

// sensitivity scale factor respective to full scale setting provided in datasheet
const uint16_t AccelScaleFactor = 16384;
const uint16_t GyroScaleFactor = 131;

// MPU6050 few configuration register addresses
const uint8_t MPU6050_REGISTER_SMPLRT_DIV   =  0x19;
const uint8_t MPU6050_REGISTER_USER_CTRL    =  0x6A;
const uint8_t MPU6050_REGISTER_PWR_MGMT_1   =  0x6B;
const uint8_t MPU6050_REGISTER_PWR_MGMT_2   =  0x6C;
const uint8_t MPU6050_REGISTER_CONFIG       =  0x1A;
const uint8_t MPU6050_REGISTER_GYRO_CONFIG  =  0x1B;
const uint8_t MPU6050_REGISTER_ACCEL_CONFIG =  0x1C;
const uint8_t MPU6050_REGISTER_FIFO_EN      =  0x23;
const uint8_t MPU6050_REGISTER_INT_ENABLE   =  0x38;
const uint8_t MPU6050_REGISTER_ACCEL_XOUT_H =  0x3B;
const uint8_t MPU6050_REGISTER_SIGNAL_PATH_RESET  = 0x68;

int16_t AccelX,AccelY,AccelZ,GyroX,GyroY,GyroZ;
SoftwareSerial GPRS(7, 8);
boolean state, lastState;
const int ledpin=13; // ledpin,flamepin and buzpin are not changed throughout the process
const int flamepin=A0;
//const int buzpin=11;
const int threshold=200;// sets threshold value for flame sensor
int flamesensvalue=0; // initialize flamesensor reading

void setup() {
  Serial.begin(9600); // connect serial 
  Serial.println("The GPS Received Signal:"); 
  gpsSerial.begin(9600); // connect gps sensor 

  Serial.begin(9600);
  Wire.begin();
//  sgps.begin(9600);
  Serial.println(F("Initializing I2C devices..."));
  mpu.initialize();

  // verify connection
  Serial.println(F("Testing device connections..."));
  Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));

  // load and configure the DMP
  Serial.println(F("Initializing DMP..."));
  mpu.dmpInitialize();

//  supply your own gyro offsets here, scaled for min sensitivity
  mpu.setXGyroOffset(220);
  mpu.setYGyroOffset(76);
  mpu.setZGyroOffset(-85);
  mpu.setZAccelOffset(1788);
//  pinMode(command,OUTPUT);
//  pinMode(buzzer, OUTPUT);
//  pinMode(button, INPUT);

  Serial.begin(9600);
  pinMode(ledpin,OUTPUT);
pinMode(flamepin,INPUT);
pinMode(buzzer,OUTPUT);
  
  pinMode(2, INPUT_PULLUP);
  state = digitalRead(2);
  lastState = state;
  
  GPRS.begin(19200);
  Serial.begin(19200);
  
  GPRS.println("AT+CMGF=1");
  
  delay(1000);
}

void loop() {
if(gps.encode(gpsSerial.read()))// encode gps data 
  {  
  gps.f_get_position(&lat,&lon); // get latitude and longitude 
  
  Serial.print("Position: "); 
  Serial.print("Latitude:"); 
  Serial.print(lat,6); 
  Serial.print(";"); 
  Serial.print("Longitude:"); 
  Serial.println(lon,6);  

 }
 String latitude = String(lat,6); 
  String longitude = String(lon,6); 
Serial.println(latitude+";"+longitude); 
delay(1000);  
  {
    double Ax, Ay, Az, Gx, Gy, Gz;

    Read_RawValue(MPU6050SlaveAddress, MPU6050_REGISTER_ACCEL_XOUT_H);

    //divide each with their sensitivity scale factor
    Ax = (double)AccelX / AccelScaleFactor;
    Ay = (double)AccelY / AccelScaleFactor;
    Az = (double)AccelZ / AccelScaleFactor;
    Gx = (double)GyroX / GyroScaleFactor;
    Gy = (double)GyroY / GyroScaleFactor;
    Gz = (double)GyroZ / GyroScaleFactor;

    Serial.print(" Ax: "); Serial.print(Ax);
    Serial.print(" Ay: "); Serial.print(Ay);
    Serial.print(" Az: "); Serial.print(Az);
    Serial.print(" Gx: "); Serial.print(Gx);
    Serial.print(" Gy: "); Serial.print(Gy);
    Serial.print(" Gz: "); Serial.println(Gz);
    if (Gy >= 10.0||Gx<=-10.0||Gx>=10.0||Gx<=-10||Gz<=-10.0||Gz>=10.0)
    {
     
      Serial.println("ANGLE CHANGE IN Z DIRECTION IS SUDDEN!!!!");
    

      int x = millis();
      int  time = millis() - x;

      {
        time = millis() - x;
        digitalWrite(buzzer, HIGH);
        delay(10000);
      }

      digitalWrite(buzzer,LOW );
      
      if (time < 100)
      {
       {
  Serial.print("Testing mpu6050 ");
  Serial.println(state ? "" : "");
  
 
   GPRS.println("AT+CMGS=\"+916282559043\"");
 
  
  delay(100);
  
  GPRS.print("Accident detected!!! ");
  GPRS.print("https://www.google.com/maps/search/?api=1&query=");
  GPRS.print(latitude+""+longitude);
  
  
  GPRS.write( 0x1a ); // ctrl+Z character
  Serial.println("msg send");
  
  delay(100);
}
      }
    }
  }

  while(GPRS.available()) {
    Serial.write(GPRS.read());
  }

  flamesensvalue=analogRead(flamepin); // reads analog data from flame sensor
if (flamesensvalue<=threshold)  {
     
      Serial.println("fire detected!!!");
    

      int x = millis();
      int  time = millis() - x;

      {
        time = millis() - x;
        digitalWrite(buzzer, HIGH);
        delay(10000);
      }

      digitalWrite(buzzer,LOW );
      
      if (time < 100)
      {
        {
    Serial.print("Testing firesensor ");
  Serial.println(state ? "" : "");
  
 
   GPRS.println("AT+CMGS=\"+917559078735\"");
 
  
  delay(100);
  
  GPRS.print("Fire detected!!!  ");
  GPRS.print("https://www.google.com/maps/search/?api=1&query=");
  GPRS.print(latitude+""+longitude);
  GPRS.println(state ? "" : "");
  GPRS.write( 0x1a ); // ctrl+Z character
  Serial.println("msg send");
  delay(100);
  
}
      }
    }
  delay(100);
  
  
}


// read all 14 register
void Read_RawValue(uint8_t deviceAddress, uint8_t regAddress) {
  Wire.beginTransmission(deviceAddress);
  Wire.write(regAddress);
  Wire.endTransmission();
  Wire.requestFrom(deviceAddress, (uint8_t)14);
  AccelX = (((int16_t)Wire.read() << 8) | Wire.read());
  AccelY = (((int16_t)Wire.read() << 8) | Wire.read());
  AccelZ = (((int16_t)Wire.read() << 8) | Wire.read());
  GyroX = (((int16_t)Wire.read() << 8) | Wire.read());
  GyroY = (((int16_t)Wire.read() << 8) | Wire.read());
  GyroZ = (((int16_t)Wire.read() << 8) | Wire.read());
}